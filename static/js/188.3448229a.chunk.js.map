{"version":3,"file":"static/js/188.3448229a.chunk.js","mappings":"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","sources":["pages/dialogs/Dialogs.styled.ts","pages/dialogs/dialogsList/DialogsList.styled.ts","pages/dialogs/dialogsList/dialogsItemList/DialogsListItem.tsx","pages/dialogs/dialogsList/DialogsList.tsx","pages/dialogs/dialogsMessages/DialogsMessages.styled.ts","pages/dialogs/dialogsMessages/dialogsMessage/DialogsMessage.tsx","pages/dialogs/dialogsMessages/DialogsMessages.tsx","pages/dialogs/DialogsContainer.tsx","utils/hoc/redirectToLogin.tsx"],"sourcesContent":["import styled from 'styled-components'\r\n\r\nconst Dialogs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 200px 4fr;\r\n  grid-template-rows: 60vh;\r\n  gap: 20px;\r\n`\r\n\r\nexport const S = {\r\n  Dialogs,\r\n}\r\n","import { NavLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\nimport { F } from '../../../app/styles/Fragments.styled'\r\n\r\nconst DialogsList = styled(C.ShadowContainer)`\r\n  height: 100%;\r\n`\r\n\r\nconst List = styled.ul`\r\n  ${F.Scroll};\r\n  height: 100%;\r\n  overflow-y: hidden;\r\n  transition: all 0.3s ease;\r\n  &:hover {\r\n    overflow-y: auto;\r\n  }\r\n`\r\n\r\nconst ItemLink = styled(NavLink)`\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  display: block;\r\n  transition: all 0.3s ease;\r\n  &.active,\r\n  &:hover {\r\n    background-color: ${(props) => props.theme.colors.thirdBg};\r\n  }\r\n`\r\n\r\nconst ItemText = styled.div`\r\n  ${F.Subtitle}\r\n`\r\n\r\nexport const S = {\r\n  DialogsList,\r\n  List,\r\n  ItemLink,\r\n  ItemText,\r\n}\r\n","import { FC } from 'react'\r\n\r\nimport avatar from '../../../../app/assets/images/anynft.webp'\r\nimport { C } from '../../../../app/styles/Common.styled'\r\nimport { Avatar } from '../../../../components'\r\nimport { S } from '../DialogsList.styled'\r\n\r\ninterface DialogsListItemPT {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nexport const DialogsListItem: FC<DialogsListItemPT> = ({ id, name }) => (\r\n  <S.ItemLink to={`/dialogs/${id}`}>\r\n    <C.FlexWrapper $align={'center'} $gap={'10px'}>\r\n      <Avatar img={avatar} w={40} h={40} />\r\n      <S.ItemText>{name}</S.ItemText>\r\n    </C.FlexWrapper>\r\n  </S.ItemLink>\r\n)\r\n","import { FC, memo } from 'react'\r\n\r\nimport { DialogsListItem } from './dialogsItemList/DialogsListItem'\r\nimport { S } from './DialogsList.styled'\r\n\r\nimport { DialogsListItemT } from '../../../redux/dialogs-reducer'\r\n\r\ninterface DialogsListPT {\r\n  list: DialogsListItemT[]\r\n}\r\n\r\nexport const DialogsList: FC<DialogsListPT> = memo(({ list }) => {\r\n  const dialogsList = list.map((el) => <DialogsListItem key={el.id} id={el.id} name={el.name} />)\r\n  return (\r\n    <S.DialogsList>\r\n      <S.List>{dialogsList}</S.List>\r\n    </S.DialogsList>\r\n  )\r\n})\r\n","import styled from 'styled-components'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\nimport { F } from '../../../app/styles/Fragments.styled'\r\n\r\n//messages\r\nconst DialogsMessages = styled(C.FlexWrapper)`\r\n  height: 100%;\r\n`\r\n\r\nconst MessagesList = styled(C.ShadowContainer)`\r\n  padding: 0 10px;\r\n  overflow-y: hidden;\r\n  height: 100%;\r\n  transition: all 0.3s ease;\r\n  ${F.Scroll}\r\n  &:hover,\r\n  &:focus {\r\n    overflow-y: auto;\r\n  }\r\n`\r\n\r\nconst FormWrapper = styled(C.ShadowContainer)`\r\n  padding: 10px;\r\n`\r\n\r\n//message\r\nconst Message = styled.div`\r\n  margin: 10px;\r\n  background-color: ${(props) => props.theme.colors.accent};\r\n  border-radius: 8px 8px 8px 0;\r\n  max-width: 300px;\r\n  position: relative;\r\n  padding: 5px;\r\n  user-select: none;\r\n  word-break: break-all;\r\n  &:after {\r\n    content: '';\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: -10px;\r\n    width: 0;\r\n    height: 0;\r\n    border-style: solid;\r\n    border-width: 10px 10px 0 0; /* Размер и форма уголка */\r\n    border-color: transparent ${(props) => props.theme.colors.accent} transparent transparent; /* Цвет уголка и фона сообщения */\r\n  }\r\n`\r\n\r\nconst Text = styled.div`\r\n  color: white;\r\n  padding: 5px;\r\n  font-size: 14px;\r\n`\r\n\r\nconst Time = styled.div`\r\n  text-align: right;\r\n  font-size: 10px;\r\n  color: white;\r\n`\r\n\r\nexport const S = {\r\n  DialogsMessages,\r\n  MessagesList,\r\n  FormWrapper,\r\n  Message,\r\n  Text,\r\n  Time,\r\n}\r\n","import { FC, memo } from 'react'\r\n\r\nimport { S } from '../DialogsMessages.styled'\r\n\r\ninterface DialogsMessagePT {\r\n  id: number\r\n  message: string\r\n}\r\n\r\nexport const DialogsMessage: FC<DialogsMessagePT> = memo(({ id, message }) => {\r\n  return (\r\n    <S.Message>\r\n      <S.Text>{message}</S.Text>\r\n      <S.Time>12/04/1996</S.Time>\r\n    </S.Message>\r\n  )\r\n})\r\n","import { FC } from 'react'\r\n\r\nimport { DialogsMessage } from './dialogsMessage/DialogsMessage'\r\n\r\nimport { S } from './DialogsMessages.styled'\r\n\r\nimport { TextForm } from '../../../components'\r\nimport { DialogsMessageT } from '../../../redux/dialogs-reducer'\r\n\r\ninterface DialogsMessagesPT {\r\n  messages: DialogsMessageT[]\r\n  addMessage: (value: string) => void\r\n}\r\n\r\nexport const DialogsMessages: FC<DialogsMessagesPT> = ({ messages, addMessage }) => {\r\n  const messagesList = messages.map((el) => <DialogsMessage key={el.id} id={el.id} message={el.message} />)\r\n  return (\r\n    <S.DialogsMessages $direction={'column'} $gap={'20px'}>\r\n      <S.MessagesList>{messagesList}</S.MessagesList>\r\n      <S.FormWrapper>\r\n        <TextForm placeholder={'Enter your message...'} callback={addMessage} />\r\n      </S.FormWrapper>\r\n    </S.DialogsMessages>\r\n  )\r\n}\r\n","import { ComponentType, FC, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\n\r\nimport { S } from './Dialogs.styled'\r\nimport { DialogsList } from './dialogsList/DialogsList'\r\nimport { DialogsMessages } from './dialogsMessages/DialogsMessages'\r\n\r\nimport { addMessage, getDialogsState, DialogsST } from '../../redux/dialogs-reducer'\r\nimport { RootStateT } from '../../redux/store'\r\nimport { redirectToLogin } from '../../utils/hoc/redirectToLogin'\r\n\r\ntype DialogsPT = DialogsST & MapDispatchPT\r\n\r\nexport const Dialogs: FC<DialogsPT> = ({ list, messages, addMessage }) => {\r\n  useEffect(() => {\r\n    document.title = 'Dialogs'\r\n  }, [])\r\n  return (\r\n    <S.Dialogs>\r\n      <DialogsList list={list} />\r\n      <DialogsMessages messages={messages} addMessage={addMessage} />\r\n    </S.Dialogs>\r\n  )\r\n}\r\n\r\ninterface MapDispatchPT {\r\n  addMessage: (message: string) => void\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n  connect<DialogsST, MapDispatchPT, unknown, RootStateT>(getDialogsState, {\r\n    addMessage,\r\n  }),\r\n  redirectToLogin,\r\n)(Dialogs)\r\n","import React, { ComponentType, FC } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport { AppST } from '../../redux/app-reducer'\nimport { RootStateT } from '../../redux/store'\n\nexport const redirectToLogin = (Component: ComponentType<any>) => {\n  const MyRedirect: FC<MapStatePT> = ({ isAuth, ...restProps }) => {\n    return isAuth ? <Component {...restProps} /> : <Redirect to={'/login'} />\n  }\n\n  type MapStatePT = Pick<AppST, 'isAuth'>\n\n  const mapStateToProps = (state: RootStateT): MapStatePT => ({\n    isAuth: state.app.isAuth,\n  })\n\n  return connect<MapStatePT, unknown, unknown, RootStateT>(mapStateToProps)(MyRedirect)\n}\n"],"names":["S","Dialogs","styled","DialogsList","C","List","F","ItemLink","NavLink","props","theme","colors","thirdBg","ItemText","DialogsListItem","id","name","to","$align","$gap","img","avatar","w","h","memo","dialogsList","list","map","el","DialogsMessages","MessagesList","FormWrapper","Message","accent","Text","Time","DialogsMessage","message","messages","addMessage","messagesList","$direction","placeholder","callback","useEffect","document","title","compose","connect","getDialogsState","redirectToLogin","Component","state","isAuth","app","restProps"],"sourceRoot":""}