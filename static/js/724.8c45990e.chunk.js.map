{"version":3,"file":"static/js/724.8c45990e.chunk.js","mappings":"kRAaaA,EAA6B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACrDC,EAAgB,CACpBC,MAAO,GACPC,SAAU,GACVL,QAAAA,EACAM,UAAU,GAGZ,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WAGR,OAFAD,GAAa,GAEN,WACLA,GAAa,MAEd,IASH,OACE,SAAC,KAAD,CAAQE,cAAeR,EAAeS,SARvB,SAACC,EAA8BC,GAC9CZ,EAAUW,EAAOT,MAAOS,EAAOR,SAAUQ,EAAOP,SAAUO,EAAOb,SAC7DQ,GACFM,EAAMC,eAAc,IAKoCC,iBAAkBC,EAAAA,GAA5E,SACG,SAACH,GACA,IAAQI,EAAkCJ,EAAlCI,OAAQC,EAA0BL,EAA1BK,QAASC,EAAiBN,EAAjBM,aACzB,OACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,SAAU,QAASC,OAAQ,aAA1C,UACE,UAAC,EAAAC,EAAA,YAAD,CAAeC,WAAY,SAAUC,KAAM,OAAQC,SAAU,SAAUC,OAAQ,SAA/E,WACE,SAAC,KAAD,CACEC,GAAI,cACJC,GAAIC,EAAAA,GACJC,MAAO,WACPC,KAAM,QACNC,KAAM,QACNC,YAAa,kBACblC,MAAOiB,EAAOd,OAASe,EAAQf,MAC/BgC,UAAWlB,EAAOd,MAClBiB,MAAO,CAAEgB,QAAS,WAEpB,SAAC,KAAD,CACER,GAAI,iBACJC,GAAIC,EAAAA,GACJC,MAAO,aACPC,KAAM,WACNC,KAAM,WACNC,YAAa,sBACblC,MAAOiB,EAAOb,UAAYc,EAAQd,SAClC+B,UAAWlB,EAAOb,SAClBgB,MAAO,CAAEgB,QAAS,WAEpB,SAAC,KAAD,CAAOR,GAAI,iBAAkBC,GAAIC,EAAAA,GAAOC,MAAO,cAAeC,KAAM,WAAYC,KAAM,aACrFlC,IACC,SAAC,KAAD,CACE6B,GAAI,gBACJC,GAAIC,EAAAA,GACJC,OAAO,gBAAKM,IAAKtC,EAASuC,IAAI,QAC9BN,KAAM,UACNC,KAAM,OACNC,YAAa,gBACblC,MAAOiB,EAAOlB,SAAWmB,EAAQnB,QACjCoC,UAAWlB,EAAOlB,QAClBqB,MAAO,CAAEgB,QAAS,UAGrBpC,IAAS,SAAC,KAAD,UAAaA,IACtBmB,GACC,SAAC,KAAD,KAEA,SAAC,KAAD,CAAQc,KAAK,SAASM,MAAO,QAASC,QAASC,OAAOC,KAAKzB,GAAQ0B,OAAS,a,UC1E/EC,EAAwC,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,OAAQ9C,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC9E,OAAO4C,GACL,SAAC,KAAD,CAAUC,GAAI,cAEd,UAAC,EAAAvB,EAAA,YAAD,CAAeE,KAAM,OAAQD,WAAY,SAAUE,SAAU,SAAUqB,SAAO,EAA9E,WACE,SAAC,KAAD,CAAYR,MAAO,WACnB,SAACzC,EAAD,CAAWE,MAAOA,EAAOD,QAASA,EAASE,UAAWA,QAqB5D,GAAe+C,EAAAA,EAAAA,KAVS,SAACC,GAAD,MAAoC,CAC1DJ,OAAQI,EAAMC,IAAIL,OAClB9C,QAASkD,EAAMC,IAAInD,QACnBC,MAAOiD,EAAMC,IAAIlD,SAOqE,CACtFC,UAAAA,EAAAA,IADF,CAEG2C","sources":["pages/login/LoginForm.tsx","pages/login/Login.tsx"],"sourcesContent":["import { Field, Form, Formik, FormikHelpers } from 'formik'\nimport { FC, useEffect, useState } from 'react'\n\nimport { C } from '../../app/styles/Common.styled'\nimport { Button, ErrorField, Input, Loading } from '../../components'\nimport { LoginSchema } from '../../utils/validators/validators'\n\ninterface LoginFormPT {\n  captcha: string\n  error: string\n  loginUser: (email: string, password: string, rememberMe: boolean, captcha: string) => any\n}\n\nexport const LoginForm: FC<LoginFormPT> = ({ captcha, error, loginUser }) => {\n  const initialFields = {\n    email: '',\n    password: '',\n    captcha,\n    remember: false,\n  }\n\n  const [isMounted, setIsMounted] = useState(true)\n\n  useEffect(() => {\n    setIsMounted(true)\n\n    return () => {\n      setIsMounted(false)\n    }\n  }, [])\n\n  const onSubmit = (values: typeof initialFields, props: FormikHelpers<typeof initialFields>) => {\n    loginUser(values.email, values.password, values.remember, values.captcha)\n    if (isMounted) {\n      props.setSubmitting(false)\n    }\n  }\n\n  return (\n    <Formik initialValues={initialFields} onSubmit={onSubmit} validationSchema={LoginSchema}>\n      {(props) => {\n        const { errors, touched, isSubmitting } = props\n        return (\n          <Form style={{ maxWidth: '500px', margin: '20px auto' }}>\n            <C.FlexWrapper $direction={'column'} $gap={'20px'} $justify={'center'} $align={'center'}>\n              <Field\n                id={'email_login'}\n                as={Input}\n                label={'E-mail *'}\n                name={'email'}\n                type={'email'}\n                placeholder={'Enter you email'}\n                error={errors.email && touched.email}\n                errorText={errors.email}\n                style={{ padding: '10px' }}\n              />\n              <Field\n                id={'password_login'}\n                as={Input}\n                label={'Password *'}\n                name={'password'}\n                type={'password'}\n                placeholder={'Enter your password'}\n                error={errors.password && touched.password}\n                errorText={errors.password}\n                style={{ padding: '10px' }}\n              />\n              <Field id={'remember_login'} as={Input} label={'Remember me'} name={'remember'} type={'checkbox'} />\n              {captcha && (\n                <Field\n                  id={'captcha_login'}\n                  as={Input}\n                  label={<img src={captcha} alt='asd' />}\n                  name={'captcha'}\n                  type={'text'}\n                  placeholder={'Enter captcha'}\n                  error={errors.captcha && touched.captcha}\n                  errorText={errors.captcha}\n                  style={{ padding: '10px' }}\n                />\n              )}\n              {error && <ErrorField>{error}</ErrorField>}\n              {isSubmitting ? (\n                <Loading />\n              ) : (\n                <Button type='submit' title={'login'} disable={Object.keys(errors).length > 0} />\n              )}\n            </C.FlexWrapper>\n          </Form>\n        )\n      }}\n    </Formik>\n  )\n}\n","import { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport { LoginForm } from './LoginForm'\r\n\r\nimport { C } from '../../app/styles/Common.styled'\r\nimport { TitleBlock } from '../../components'\r\nimport { loginUser } from '../../redux/app-reducer'\r\nimport { RootStateT } from '../../redux/store'\r\n\r\nexport const Login: FC<MapStatePT & MapDispatchPT> = ({ isAuth, captcha, error, loginUser }) => {\r\n  return isAuth ? (\r\n    <Redirect to={'/profile'} />\r\n  ) : (\r\n    <C.FlexWrapper $gap={'10px'} $direction={'column'} $justify={'center'} $shadow>\r\n      <TitleBlock title={'LOGIN'} />\r\n      <LoginForm error={error} captcha={captcha} loginUser={loginUser} />\r\n    </C.FlexWrapper>\r\n  )\r\n}\r\n\r\ninterface MapStatePT {\r\n  isAuth: boolean\r\n  captcha: string\r\n  error: string\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateT): MapStatePT => ({\r\n  isAuth: state.app.isAuth,\r\n  captcha: state.app.captcha,\r\n  error: state.app.error,\r\n})\r\n\r\ninterface MapDispatchPT {\r\n  loginUser: (email: string, password: string, rememberMe: boolean, captcha: string) => any\r\n}\r\n\r\nexport default connect<MapStatePT, MapDispatchPT, unknown, RootStateT>(mapStateToProps, {\r\n  loginUser,\r\n})(Login)\r\n"],"names":["LoginForm","captcha","error","loginUser","initialFields","email","password","remember","useState","isMounted","setIsMounted","useEffect","initialValues","onSubmit","values","props","setSubmitting","validationSchema","LoginSchema","errors","touched","isSubmitting","style","maxWidth","margin","C","$direction","$gap","$justify","$align","id","as","Input","label","name","type","placeholder","errorText","padding","src","alt","title","disable","Object","keys","length","Login","isAuth","to","$shadow","connect","state","app"],"sourceRoot":""}