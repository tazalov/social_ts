{"version":3,"file":"static/js/671.303f54df.chunk.js","mappings":"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","sources":["components/text/Text.tsx","pages/profile/profileInfo/links/Links.tsx","pages/profile/about/About.tsx","pages/profile/friends/Friends.styled.ts","pages/profile/friends/Friend.tsx","pages/profile/friends/Friends.tsx","pages/profile/posts/post/Post.styled.ts","pages/profile/posts/post/Post.tsx","pages/profile/posts/Posts.styled.ts","pages/profile/posts/Posts.tsx","pages/profile/profileInfo/profileEditForm/ProfileEditForm.tsx","pages/profile/profileInfo/ProfileInfo.styled.ts","pages/profile/profileInfo/status/Status.tsx","pages/profile/profileInfo/ProfileInfo.tsx","pages/profile/Profile.tsx","pages/profile/ProfileContainer.tsx","utils/hoc/redirectToLogin.tsx","utils/string/getShortString.ts"],"sourcesContent":["import { FC } from 'react'\nimport styled from 'styled-components'\n\nimport { F } from '../../app/styles/Fragments.styled'\n\ntype TextPT = {\n  title: string\n  text: string\n}\n\nexport const Text: FC<TextPT> = ({ title, text }) => {\n  return (\n    <StyledTextWrapper>\n      <span>{title}: </span>\n      <StyledText>{text}</StyledText>\n    </StyledTextWrapper>\n  )\n}\n\nconst StyledTextWrapper = styled.div`\n  ${F.Subtitle};\n`\n\nconst StyledText = styled.span`\n  color: ${(props) => props.theme.colors.accent2};\n`\n","import { FC, memo } from 'react'\n\nimport { C } from '../../../../app/styles/Common.styled'\nimport { Social } from '../../../../components'\nimport { ContactsT } from '../../../../redux/profile-reducer'\n\ninterface LinksPT {\n  links: ContactsT\n}\n\nexport type ContactLinksT = keyof ContactsT\n\nexport const Links: FC<LinksPT> = memo(({ links }) => {\n  const linksNames = Object.keys(links) as ContactLinksT[]\n  return (\n    <C.FlexWrapper $gap={'10px'} $justify={'center'} $wrap={'wrap'} style={{ maxWidth: '200px', margin: '0 auto' }}>\n      {linksNames.reduce((acc, el) => {\n        if (links[el]) {\n          acc.push(<Social key={el} iconId={el} link={links[el] ?? ''} />)\n        }\n        return acc\n      }, [] as JSX.Element[])}\n    </C.FlexWrapper>\n  )\n})\n","import { FC, memo } from 'react'\n\nimport { C } from '../../../app/styles/Common.styled'\nimport { TitleBlock } from '../../../components'\nimport { Text } from '../../../components/text/Text'\nimport { ContactsT } from '../../../redux/profile-reducer'\nimport { Links } from '../profileInfo/links/Links'\n\ntype AboutPT = {\n  about: string | null\n  contacts: ContactsT\n  lookingForAJob: boolean\n}\n\nexport const About: FC<AboutPT> = memo(({ about, contacts, lookingForAJob }) => {\n  return (\n    <C.ShadowContainer style={{ height: 'min-content', minWidth: '300px' }}>\n      <TitleBlock title={'Current profile info'} />\n      <C.FlexWrapper $direction={'column'} $gap={'20px'} style={{ padding: '10px' }}>\n        <Text title={'Looking job'} text={lookingForAJob ? 'YES' : 'NO'} />\n        {about && <Text title={'About me'} text={about} />}\n        <Links links={contacts} />\n      </C.FlexWrapper>\n    </C.ShadowContainer>\n  )\n})\n","import styled from 'styled-components'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\n\r\n//friends\r\nconst Friends = styled(C.ShadowContainer)`\r\n  height: min-content;\r\n  min-width: 300px;\r\n`\r\n\r\nconst List = styled.ul`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-auto-rows: 1fr;\r\n`\r\n\r\n//friend\r\nconst Friend = styled.div`\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  &:hover {\r\n    background-color: ${(props) => props.theme.colors.thirdBg};\r\n  }\r\n`\r\n\r\nconst Name = styled.div`\r\n  margin: 10px 0 0 0;\r\n  color: ${(props) => props.theme.colors.primaryFont};\r\n  text-align: center;\r\n`\r\n\r\nexport const S = {\r\n  Friends,\r\n  List,\r\n  Friend,\r\n  Name,\r\n}\r\n","import { FC } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { S } from './Friends.styled'\r\n\r\nimport noAvatar from '../../../app/assets/images/anynft.webp'\r\nimport { Avatar } from '../../../components'\r\nimport { FriendT } from '../../../redux/profile-reducer'\r\nimport { getShortString } from '../../../utils/string/getShortString'\r\n\r\ninterface FriendPT {\r\n  friend: FriendT\r\n}\r\n\r\nexport const Friend: FC<FriendPT> = ({ friend }) => {\r\n  const { id, name, photos } = friend\r\n  return (\r\n    <Link to={`/profile/${id}`}>\r\n      <S.Friend>\r\n        <Avatar img={photos.small || noAvatar} w={80} h={80} />\r\n        <S.Name>{getShortString(name, 10)}</S.Name>\r\n      </S.Friend>\r\n    </Link>\r\n  )\r\n}\r\n","import { FC, memo } from 'react'\n\nimport { Friend } from './Friend'\nimport { S } from './Friends.styled'\n\nimport { TitleBlock } from '../../../components'\nimport { FriendsT } from '../../../redux/profile-reducer'\n\ninterface FriendsPT {\n  friends: FriendsT | null\n}\n\nexport const Friends: FC<FriendsPT> = memo(({ friends }) => {\n  const friendsProfile = friends?.list.map((el) => <Friend key={el.id} friend={el} />) || 'No friends'\n  return (\n    <S.Friends>\n      <TitleBlock title={'My friends'} />\n      <S.List>{friendsProfile}</S.List>\n    </S.Friends>\n  )\n})\n","import styled from 'styled-components'\r\n\r\nimport { C } from '../../../../app/styles/Common.styled'\r\nimport { F } from '../../../../app/styles/Fragments.styled'\r\n\r\nconst Post = styled(C.ShadowContainer)`\r\n  word-break: break-all;\r\n`\r\n\r\nconst PostHeader = styled(C.FlexWrapper)`\r\n  background-color: ${(props) => props.theme.colors.accent};\r\n  color: ${(props) => {\r\n    const { name, colors } = props.theme\r\n    return name === 'light' ? colors.secondaryFont : colors.primaryFont\r\n  }};\r\n  padding: 10px;\r\n`\r\n\r\nconst UserInfo = styled(C.FlexWrapper)`\r\n  width: 100%;\r\n  margin-left: 10px;\r\n  span {\r\n    ${F.Subtitle};\r\n  }\r\n  i {\r\n    color: ${(props) => {\r\n      const { name, colors } = props.theme\r\n      return name === 'light' ? colors.secondaryFont : colors.primaryFont\r\n    }};\r\n    font-size: 10px;\r\n  }\r\n`\r\n\r\nconst PostText = styled.div`\r\n  padding: 20px 10px;\r\n`\r\n\r\nconst PostButtons = styled(C.FlexWrapper)`\r\n  padding: 10px;\r\n  button {\r\n    padding: 5px;\r\n    color: ${(props) => props.theme.colors.error};\r\n    font-size: 14px;\r\n    transition: all 0.3s ease;\r\n    &:hover {\r\n      color: ${(props) => props.theme.colors.accent};\r\n    }\r\n    span {\r\n      margin-left: 5px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const S = {\r\n  Post,\r\n  PostHeader,\r\n  UserInfo,\r\n  PostText,\r\n  PostButtons,\r\n}\r\n","import { faHeart, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { FC, memo } from 'react'\r\n\r\nimport { S } from './Post.styled'\r\n\r\nimport avatar from '../../../../app/assets/images/anynft.webp'\r\nimport { Avatar } from '../../../../components'\r\n\r\nimport { PostT } from '../../../../redux/profile-reducer'\r\n\r\ninterface PostPT {\r\n  post: PostT\r\n}\r\n\r\nexport const Post: FC<PostPT> = memo(({ post }) => {\r\n  const { user, text, likes } = post\r\n  return (\r\n    <S.Post>\r\n      <S.PostHeader $align={'center'}>\r\n        <Avatar img={avatar} w={50} h={50} />\r\n        <S.UserInfo $gap={'10px'} $justify={'space-between'}>\r\n          <span>{user}</span>\r\n          <i>12/04/2022</i>\r\n        </S.UserInfo>\r\n      </S.PostHeader>\r\n      <S.PostText>{text}</S.PostText>\r\n      <S.PostButtons $gap={'10px'} $justify={'space-between'}>\r\n        <button>\r\n          <FontAwesomeIcon icon={faHeart} />\r\n          <span>{likes}</span>\r\n        </button>\r\n        <button>\r\n          <FontAwesomeIcon icon={faTrash} />\r\n        </button>\r\n      </S.PostButtons>\r\n    </S.Post>\r\n  )\r\n})\r\n","import styled from 'styled-components'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\n\r\nconst Posts = styled(C.FlexWrapper)`\r\n  width: 100%;\r\n`\r\n\r\nconst FormWrapper = styled.div`\r\n  padding: 10px;\r\n`\r\n\r\nexport const S = {\r\n  Posts,\r\n  FormWrapper,\r\n}\r\n","import { FC, memo } from 'react'\n\nimport { Post } from './post/Post'\nimport { S } from './Posts.styled'\n\nimport { C } from '../../../app/styles/Common.styled'\nimport { TextForm, TitleBlock } from '../../../components'\nimport { PostT } from '../../../redux/profile-reducer'\n\ninterface PostsPT {\n  posts: PostT[]\n  addPost: (postText: string) => void\n}\n\nexport const Posts: FC<PostsPT> = memo(({ posts, addPost }) => {\n  return (\n    <S.Posts $direction={'column'} $gap={'20px'}>\n      <C.ShadowContainer>\n        <TitleBlock title={'My posts'} />\n        <S.FormWrapper>\n          <TextForm placeholder={'Enter post message...'} callback={addPost} />\n        </S.FormWrapper>\n      </C.ShadowContainer>\n      {posts.map((el) => (\n        <Post key={el.id} post={el} />\n      ))}\n    </S.Posts>\n  )\n})\n","import { Field, Form, Formik, FormikHelpers } from 'formik'\nimport { FC, useEffect, useState } from 'react'\n\nimport { C } from '../../../../app/styles/Common.styled'\nimport { Button, ErrorField, Input, Loading, TitleBlock } from '../../../../components'\nimport { ProfileT } from '../../../../redux/profile-reducer'\nimport { ProfileSchema } from '../../../../utils/validators/validators'\n\ntype ProfileEditFormPT = {\n  profile: ProfileT\n  error: string\n  updateProfile: (profile: Omit<ProfileT, 'photos'>) => void\n}\n\nexport const ProfileEditForm: FC<ProfileEditFormPT> = ({ profile, error, updateProfile }) => {\n  const initialFields = {\n    fullName: profile.fullName,\n    aboutMe: profile.aboutMe || '',\n    lookingForAJob: profile.lookingForAJob,\n    lookingForAJobDescription: profile.lookingForAJobDescription || '',\n    contacts: {\n      facebook: profile.contacts.facebook || '',\n      website: profile.contacts.website || '',\n      vk: profile.contacts.vk || '',\n      twitter: profile.contacts.twitter || '',\n      instagram: profile.contacts.instagram || '',\n      youtube: profile.contacts.youtube || '',\n      github: profile.contacts.github || '',\n      mainLink: profile.contacts.mainLink || '',\n    },\n  }\n  const [isMounted, setIsMounted] = useState(true)\n\n  useEffect(() => {\n    setIsMounted(true)\n\n    return () => {\n      setIsMounted(false)\n    }\n  }, [])\n\n  const onSubmit = (values: typeof initialFields, props: FormikHelpers<typeof initialFields>) => {\n    updateProfile({ userId: profile.userId, ...values })\n    console.log(values)\n    if (isMounted) {\n      props.setSubmitting(false)\n    }\n  }\n\n  return (\n    <Formik initialValues={initialFields} onSubmit={onSubmit} validationSchema={ProfileSchema}>\n      {(props) => {\n        const { errors, touched, isSubmitting } = props\n        const keysContacts = Object.keys(initialFields.contacts) as (keyof (typeof initialFields)['contacts'])[]\n        const arrayFieldsContacts = keysContacts.map((el, i) => (\n          <Field\n            key={i}\n            id={`${el}_profile`}\n            as={Input}\n            label={el}\n            name={`contacts.${el}`}\n            error={errors.contacts && errors.contacts[el] && touched.contacts && touched.contacts[el]}\n            errorText={errors.contacts && errors.contacts[el]}\n            style={{ padding: '5px' }}\n            rows\n          />\n        ))\n        return (\n          <Form>\n            <TitleBlock title={'PROFILE INFO'} />\n            <C.FlexWrapper\n              $direction={'column'}\n              $gap={'15px'}\n              $justify={'center'}\n              $align={'center'}\n              style={{ padding: '10px' }}\n            >\n              <Field\n                id={`fullName_profile`}\n                as={Input}\n                label={'Full name'}\n                name={`fullName`}\n                error={errors.fullName && touched.fullName}\n                errorText={errors.fullName}\n                style={{ padding: '5px' }}\n              />\n              <Field\n                id={`aboutMe_profile`}\n                as={Input}\n                label={'About me'}\n                name={`aboutMe`}\n                error={errors.aboutMe && touched.aboutMe}\n                errorText={errors.aboutMe}\n                style={{ padding: '5px' }}\n              />\n              <Field\n                id={'lookingForAJob_profile'}\n                as={Input}\n                label={'Looking job'}\n                name={'lookingForAJob'}\n                type={'checkbox'}\n                rows\n              />\n              <Field\n                id={`lookingForAJobDescription_profile`}\n                as={Input}\n                name={`lookingForAJobDescription`}\n                error={errors.lookingForAJobDescription && touched.lookingForAJobDescription}\n                errorText={errors.lookingForAJobDescription}\n                style={{ padding: '5px' }}\n              />\n            </C.FlexWrapper>\n            <TitleBlock title={'CONTACTS'} />\n            <C.FlexWrapper\n              $direction={'column'}\n              $gap={'15px'}\n              $justify={'center'}\n              $align={'flex-end'}\n              style={{ padding: '10px' }}\n            >\n              {arrayFieldsContacts}\n            </C.FlexWrapper>\n            <C.FlexWrapper\n              $direction={'column'}\n              $gap={'15px'}\n              $justify={'center'}\n              $align={'center'}\n              style={{ padding: '10px' }}\n            >\n              {error && <ErrorField>{error}</ErrorField>}\n              {isSubmitting ? (\n                <Loading />\n              ) : (\n                <Button type='submit' title={'save'} disable={Object.keys(errors).length > 0} />\n              )}\n            </C.FlexWrapper>\n          </Form>\n        )\n      }}\n    </Formik>\n  )\n}\n","import styled, { css } from 'styled-components'\n\nimport { C } from '../../../app/styles/Common.styled'\n\nconst ProfileInfoStyled = styled(C.FlexWrapper)`\n  padding: 10px 10px 10px 160px;\n  position: relative;\n  width: 100%;\n`\n\nconst AvatarPos = css`\n  position: absolute;\n  margin-top: -80px;\n  left: 10px;\n  top: 0;\n  border: 5px solid ${(props) => props.theme.colors.secondaryBg};\n  border-radius: 50%;\n`\n\nconst Info = styled(C.FlexWrapper)`\n  margin-left: 20px;\n  width: 100%;\n`\n\nconst Name = styled(C.FlexWrapper)`\n  font-size: 25px;\n  p {\n    text-transform: uppercase;\n    font-weight: 600;\n    color: ${(props) => props.theme.colors.accent};\n  }\n  span {\n    font-size: 14px;\n    padding: 5px;\n    background-color: ${(props) => props.theme.colors.primaryBg};\n  }\n`\n\nconst Status = styled.div`\n  color: ${(props) => {\n    const { name, colors } = props.theme\n    return name === 'light' ? colors.primaryFont : colors.secondaryFont\n  }};\n  display: inline-flex;\n  width: 100%;\n  & span {\n    padding: 5px 5px 5px 0;\n    font-style: italic;\n    display: inline-block;\n    width: 100%;\n  }\n`\n\nconst EditPhoto = styled.label`\n  padding: 6px;\n  color: ${(props) => props.theme.colors.accent};\n  border: 1px solid ${(props) => props.theme.colors.accent};\n  transition: all 0.3s ease;\n  border-radius: 5px;\n  font-size: 14px;\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  &:hover {\n    background-color: ${(props) => props.theme.colors.accent};\n    border: 1px solid ${(props) => props.theme.colors.accent};\n    color: ${(props) => props.theme.colors.thirdBg};\n  }\n`\n\nconst CoverImg = styled.div`\n  height: 150px;\n  background: rgb(66, 73, 121);\n  background: linear-gradient(139deg, rgba(66, 73, 121, 1) 15%, rgba(115, 164, 222, 1) 57%, rgba(0, 212, 255, 1) 100%);\n  img {\n    height: 100%;\n    width: 100%;\n    object-fit: cover;\n  }\n`\n\nexport const S = {\n  ProfileInfo: ProfileInfoStyled,\n  AvatarPos,\n  Info,\n  Name,\n  Status,\n  EditPhoto,\n  CoverImg,\n}\n","import { ChangeEvent, FC, KeyboardEvent, useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Input } from '../../../../components'\nimport { updateStatusProfile } from '../../../../redux/profile-reducer'\nimport { RootStateT } from '../../../../redux/store'\nimport { getShortString } from '../../../../utils/string/getShortString'\nimport { S } from '../ProfileInfo.styled'\n\ntype StatusPT = MapStatePT & MapDispatchPT\n\nconst Status: FC<StatusPT> = ({ id, userId, status, updateStatusProfile }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [currentStatus, setCurrentStatus] = useState('')\n\n  useEffect(() => {\n    setCurrentStatus(status)\n  }, [status])\n\n  const activateEditMode = () => {\n    if (id === userId) setEditMode(true)\n  }\n\n  const deactivateEditMode = () => {\n    setCurrentStatus(status)\n    setEditMode(false)\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => setCurrentStatus(e.currentTarget.value)\n\n  const handleEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      updateStatusProfile(currentStatus)\n      deactivateEditMode()\n    }\n  }\n\n  const newStatus = status ? getShortString(status, 40) : 'No status'\n\n  return (\n    <S.Status>\n      {!editMode ? (\n        <span role='status-span' onDoubleClick={activateEditMode}>\n          {newStatus}\n        </span>\n      ) : (\n        <Input\n          id='status_profile'\n          role='status-input'\n          type='text'\n          value={currentStatus}\n          onChange={handleOnChange}\n          onBlur={deactivateEditMode}\n          onKeyDown={handleEnter}\n          autoFocus\n        />\n      )}\n    </S.Status>\n  )\n}\n\ninterface MapStatePT {\n  id?: number | null\n  userId?: number | null\n  status: string\n}\n\nconst mapStateToProps = (state: RootStateT): MapStatePT => ({\n  id: state.app.id,\n  userId: state.profile.profile?.userId,\n  status: state.profile.status,\n})\n\ninterface MapDispatchPT {\n  updateStatusProfile: (status: string) => void\n}\n\nexport default connect<MapStatePT, MapDispatchPT, unknown, RootStateT>(mapStateToProps, {\n  updateStatusProfile,\n})(Status)\n","import { faCamera } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { ChangeEvent, FC, memo, useCallback, useState } from 'react'\n\nimport { ProfileEditForm } from './profileEditForm/ProfileEditForm'\nimport { S } from './ProfileInfo.styled'\nimport Status from './status/Status'\n\nimport noAvatar from '../../../app/assets/images/anynft.webp'\nimport { C } from '../../../app/styles/Common.styled'\nimport { Avatar, ButtonB, Input, Modal } from '../../../components'\nimport { ProfileT } from '../../../redux/profile-reducer'\n\ninterface ProfileInfoPT {\n  profile: ProfileT\n  isOwner: boolean\n  errorUpdate: string\n  updatePhoto: (photo: File) => void\n  updateProfile: (profile: Omit<ProfileT, 'photos'>) => void\n}\n\nexport const ProfileInfo: FC<ProfileInfoPT> = memo(({ profile, isOwner, errorUpdate, updatePhoto, updateProfile }) => {\n  const { fullName, lookingForAJobDescription, photos } = profile\n\n  const [isAuthModal, setIsAuthModal] = useState(false)\n\n  const onShowModal = useCallback(() => {\n    setIsAuthModal(true)\n  }, [])\n\n  const onCloseModal = useCallback(() => {\n    setIsAuthModal(false)\n  }, [])\n\n  const handleOnChangeFile = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      updatePhoto(e.target.files[0])\n    }\n  }\n\n  return (\n    <C.ShadowContainer>\n      <S.CoverImg>{photos.large && <img src={photos.large} alt='' />}</S.CoverImg>\n      <C.FlexWrapper $align={'center'} $justify={'space-between'}>\n        <S.ProfileInfo $align={'center'}>\n          <Avatar img={photos.large || noAvatar} w={150} h={150} pos_styles={S.AvatarPos} />\n          <S.Info $direction={'column'} $align={'flex-start'} $gap={'10px'}>\n            <S.Name $align={'center'} $gap={'5px'}>\n              <p>{fullName}</p>\n              <span>{lookingForAJobDescription || 'developer'}</span>\n            </S.Name>\n            <Status />\n          </S.Info>\n        </S.ProfileInfo>\n        {isOwner && (\n          <C.FlexWrapper $align={'center'} $gap={'5px'} $justify={'center'} style={{ padding: '10px' }}>\n            <S.EditPhoto htmlFor={'edit_photo_profile'}>\n              <FontAwesomeIcon icon={faCamera} />\n            </S.EditPhoto>\n            <Input\n              id={'edit_photo_profile'}\n              type={'file'}\n              accept='image/png, image/gif, image/jpeg'\n              style={{ display: 'none' }}\n              onChange={handleOnChangeFile}\n            />\n            <ButtonB title={'edit'} callback={onShowModal} />\n          </C.FlexWrapper>\n        )}\n        <Modal isOpen={isAuthModal} onClose={onCloseModal}>\n          <ProfileEditForm profile={profile} updateProfile={updateProfile} error={errorUpdate} />\n        </Modal>\n      </C.FlexWrapper>\n    </C.ShadowContainer>\n  )\n})\n","import { FC } from 'react'\n\nimport { About } from './about/About'\nimport { Friends } from './friends/Friends'\nimport { Posts } from './posts/Posts'\nimport { ProfileInfo } from './profileInfo/ProfileInfo'\n\nimport { C } from '../../app/styles/Common.styled'\nimport { FriendsT, PostT, ProfileT } from '../../redux/profile-reducer'\n\ninterface ProfilePT {\n  profile: ProfileT\n  posts: PostT[]\n  friends: FriendsT | null\n  isOwner: boolean\n  errorUpdate: string\n  addPost: (postText: string) => void\n  updatePhoto: (photo: File) => void\n  updateProfile: (profile: Omit<ProfileT, 'photos'>) => void\n}\n\nexport const Profile: FC<ProfilePT> = ({\n  profile,\n  posts,\n  friends,\n  isOwner,\n  errorUpdate,\n  addPost,\n  updatePhoto,\n  updateProfile,\n}) => {\n  const { lookingForAJob, contacts, aboutMe } = profile\n  return (\n    <C.FlexWrapper $gap={'20px'} $direction={'column'}>\n      <ProfileInfo\n        profile={profile}\n        updatePhoto={updatePhoto}\n        isOwner={isOwner}\n        updateProfile={updateProfile}\n        errorUpdate={errorUpdate}\n      />\n      <C.FlexWrapper $gap={'20px'}>\n        <Posts posts={posts} addPost={addPost} />\n        <C.FlexWrapper $gap={'20px'} $direction={'column'}>\n          <About about={aboutMe} contacts={contacts} lookingForAJob={lookingForAJob} />\n          <Friends friends={friends} />\n        </C.FlexWrapper>\n      </C.FlexWrapper>\n    </C.FlexWrapper>\n  )\n}\n","import { Component, ComponentType } from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport { compose } from 'redux'\n\nimport { Profile } from './Profile'\n\nimport { Preloader } from '../../components'\nimport { AppST } from '../../redux/app-reducer'\nimport {\n  addPost,\n  getFriendsProfile,\n  getStatusProfile,\n  getUserProfile,\n  ProfileST,\n  ProfileT,\n} from '../../redux/profile-reducer'\nimport { updatePhotoProfile, updateProfile } from '../../redux/profile-reducer/model/thunks/profile.thunks'\nimport { RootStateT } from '../../redux/store'\nimport { redirectToLogin } from '../../utils/hoc/redirectToLogin'\n\ntype ProfileContainerPT = MapStatePT & MapDispatchPT & RouteComponentProps<{ userId: string }>\n\nclass ProfileContainer extends Component<ProfileContainerPT> {\n  refreshProfile() {\n    let userId = this.props.match.params.userId\n    if (!userId) userId = `${this.props.id}`\n    this.props.getFriendsProfile()\n    this.props.getUserProfile(userId)\n    this.props.getStatusProfile(userId)\n  }\n\n  componentDidMount() {\n    this.refreshProfile()\n  }\n\n  componentDidUpdate(prevProps: Readonly<ProfileContainerPT>) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile()\n    }\n  }\n\n  render() {\n    const { isProfileLoading, profile, posts, friends, errorUpdate, addPost, updatePhotoProfile, updateProfile } =\n      this.props\n    return isProfileLoading || !profile ? (\n      <Preloader size={150} />\n    ) : (\n      <Profile\n        profile={profile}\n        posts={posts}\n        friends={friends}\n        isOwner={!this.props.match.params.userId}\n        errorUpdate={errorUpdate}\n        addPost={addPost}\n        updatePhoto={updatePhotoProfile}\n        updateProfile={updateProfile}\n      />\n    )\n  }\n}\n\ntype MapStatePT = Omit<ProfileST, 'status'> & Pick<AppST, 'id'>\n\nconst mapStateToProps = (state: RootStateT): MapStatePT => ({\n  profile: state.profile.profile,\n  posts: state.profile.posts,\n  friends: state.profile.friends,\n  isProfileLoading: state.profile.isProfileLoading,\n  errorUpdate: state.profile.errorUpdate,\n  id: state.app.id,\n})\n\ninterface MapDispatchPT {\n  addPost: (postText: string) => void\n  getUserProfile: (userId: string) => void\n  getStatusProfile: (userId: string) => void\n  getFriendsProfile: () => void\n  updatePhotoProfile: (photo: File) => void\n  updateProfile: (profile: Omit<ProfileT, 'photos'>) => void\n}\n\nexport default compose<ComponentType>(\n  connect<MapStatePT, MapDispatchPT, unknown, RootStateT>(mapStateToProps, {\n    addPost,\n    getUserProfile,\n    getStatusProfile,\n    getFriendsProfile,\n    updatePhotoProfile,\n    updateProfile,\n  }),\n  withRouter,\n  redirectToLogin,\n)(ProfileContainer)\n","import React, { ComponentType, FC } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport { AppST } from '../../redux/app-reducer'\nimport { RootStateT } from '../../redux/store'\n\nexport const redirectToLogin = (Component: ComponentType<any>) => {\n  const MyRedirect: FC<MapStatePT> = ({ isAuth, ...restProps }) => {\n    return isAuth ? <Component {...restProps} /> : <Redirect to={'/login'} />\n  }\n\n  type MapStatePT = Pick<AppST, 'isAuth'>\n\n  const mapStateToProps = (state: RootStateT): MapStatePT => ({\n    isAuth: state.app.isAuth,\n  })\n\n  return connect<MapStatePT, unknown, unknown, RootStateT>(mapStateToProps)(MyRedirect)\n}\n","export const getShortString = (str: string, maxLen: number) =>\n  str.length > maxLen ? `${str.slice(0, maxLen - 1)}...` : str\n"],"names":["Text","title","text","StyledTextWrapper","StyledText","styled","F","props","theme","colors","accent2","Links","memo","links","linksNames","Object","keys","C","$gap","$justify","$wrap","style","maxWidth","margin","reduce","acc","el","push","iconId","link","About","about","contacts","lookingForAJob","height","minWidth","$direction","padding","S","Friends","List","Friend","thirdBg","Name","primaryFont","friend","id","name","photos","to","img","small","noAvatar","w","h","getShortString","friends","friendsProfile","list","map","Post","PostHeader","accent","secondaryFont","UserInfo","PostText","PostButtons","error","post","user","likes","$align","avatar","icon","faHeart","faTrash","Posts","FormWrapper","posts","addPost","placeholder","callback","ProfileEditForm","profile","updateProfile","initialFields","fullName","aboutMe","lookingForAJobDescription","facebook","website","vk","twitter","instagram","youtube","github","mainLink","useState","isMounted","setIsMounted","useEffect","initialValues","onSubmit","values","userId","console","log","setSubmitting","validationSchema","ProfileSchema","errors","touched","isSubmitting","arrayFieldsContacts","i","as","Input","label","errorText","rows","type","disable","length","ProfileInfo","AvatarPos","css","secondaryBg","Info","primaryBg","Status","EditPhoto","CoverImg","connect","state","app","status","updateStatusProfile","editMode","setEditMode","currentStatus","setCurrentStatus","deactivateEditMode","newStatus","role","value","onChange","e","currentTarget","onBlur","onKeyDown","key","autoFocus","onDoubleClick","isOwner","errorUpdate","updatePhoto","isAuthModal","setIsAuthModal","onShowModal","useCallback","onCloseModal","large","src","alt","pos_styles","htmlFor","faCamera","accept","display","target","files","isOpen","onClose","Profile","ProfileContainer","this","match","params","getFriendsProfile","getUserProfile","getStatusProfile","refreshProfile","prevProps","isProfileLoading","updatePhotoProfile","size","Component","compose","withRouter","redirectToLogin","isAuth","restProps","str","maxLen","slice"],"sourceRoot":""}