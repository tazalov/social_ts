{"version":3,"file":"static/js/923.b75abb66.chunk.js","mappings":"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","sources":["pages/profile/about/About.tsx","pages/profile/friends/Friends.styled.ts","pages/profile/friends/Friend.tsx","pages/profile/friends/Friends.tsx","pages/profile/posts/post/Post.styled.ts","pages/profile/posts/post/Post.tsx","pages/profile/posts/Posts.styled.ts","pages/profile/posts/Posts.tsx","pages/profile/Profile.styled.ts","pages/profile/profileInfo/links/Links.tsx","pages/profile/profileInfo/ProfileInfo.styled.ts","pages/profile/profileInfo/status/Status.tsx","pages/profile/profileInfo/ProfileInfo.tsx","pages/profile/Profile.tsx","pages/profile/ProfileContainer.tsx","utils/hoc/redirectToLogin.tsx","utils/string/getShortString.ts"],"sourcesContent":["import { FC, memo } from 'react'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\nimport { TitleBlock } from '../../../components'\r\n\r\ntype AboutPT = {\r\n  about: string | null\r\n}\r\n\r\nexport const About: FC<AboutPT> = memo(({ about }) => {\r\n  return (\r\n    <C.ShadowContainer>\r\n      <TitleBlock title={'About me'} />\r\n      <C.Text>{about || 'User dont add this info'}</C.Text>\r\n    </C.ShadowContainer>\r\n  )\r\n})\r\n","import styled from 'styled-components'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\n\r\n//friends\r\nconst Friends = styled(C.ShadowContainer)`\r\n  height: min-content;\r\n  min-width: 300px;\r\n`\r\n\r\nconst List = styled.ul`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-auto-rows: 1fr;\r\n`\r\n\r\n//friend\r\nconst Friend = styled.div`\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  &:hover {\r\n    background-color: ${(props) => props.theme.colors.thirdBg};\r\n  }\r\n`\r\n\r\nconst Name = styled.div`\r\n  margin: 10px 0 0 0;\r\n  color: ${(props) => props.theme.colors.primaryFont};\r\n  text-align: center;\r\n`\r\n\r\nexport const S = {\r\n  Friends,\r\n  List,\r\n  Friend,\r\n  Name,\r\n}\r\n","import { FC } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { S } from './Friends.styled'\r\n\r\nimport noAvatar from '../../../app/assets/images/anynft.webp'\r\nimport { Avatar } from '../../../components'\r\nimport { FriendT } from '../../../redux/profile-reducer'\r\nimport { getShortString } from '../../../utils/string/getShortString'\r\n\r\ninterface FriendPT {\r\n  friend: FriendT\r\n}\r\n\r\nexport const Friend: FC<FriendPT> = ({ friend }) => {\r\n  const { id, name, photos } = friend\r\n  return (\r\n    <Link to={`/profile/${id}`}>\r\n      <S.Friend>\r\n        <Avatar img={photos.small || noAvatar} w={80} h={80} />\r\n        <S.Name>{getShortString(name, 10)}</S.Name>\r\n      </S.Friend>\r\n    </Link>\r\n  )\r\n}\r\n","import { FC, memo } from 'react'\r\n\r\nimport { Friend } from './Friend'\r\n\r\nimport { S } from './Friends.styled'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\nimport { TitleBlock } from '../../../components'\r\nimport { FriendsT } from '../../../redux/profile-reducer'\r\n\r\ninterface FriendsPT {\r\n  friends: FriendsT | null\r\n  isOwner: boolean\r\n}\r\n\r\nexport const Friends: FC<FriendsPT> = memo(({ friends, isOwner }) => {\r\n  const friendsProfile = friends?.list.map((el) => <Friend key={el.id} friend={el} />) || 'No friends'\r\n  return (\r\n    <S.Friends>\r\n      <TitleBlock title={<>Friends {isOwner ? <span>{friends?.count || 0}</span> : ''}</>} />\r\n      {isOwner ? <S.List>{friendsProfile}</S.List> : <C.Text>User hidden this info</C.Text>}\r\n    </S.Friends>\r\n  )\r\n})\r\n","import styled from 'styled-components'\r\n\r\nimport { C } from '../../../../app/styles/Common.styled'\r\nimport { F } from '../../../../app/styles/Fragments.styled'\r\n\r\nconst Post = styled(C.ShadowContainer)`\r\n  word-break: break-all;\r\n`\r\n\r\nconst PostHeader = styled(C.FlexWrapper)`\r\n  background-color: ${(props) => props.theme.colors.accent};\r\n  color: ${(props) => {\r\n    const { name, colors } = props.theme\r\n    return name === 'light' ? colors.secondaryFont : colors.primaryFont\r\n  }};\r\n  padding: 10px;\r\n`\r\n\r\nconst UserInfo = styled(C.FlexWrapper)`\r\n  width: 100%;\r\n  margin-left: 10px;\r\n  span {\r\n    ${F.Subtitle};\r\n  }\r\n  i {\r\n    color: ${(props) => {\r\n      const { name, colors } = props.theme\r\n      return name === 'light' ? colors.secondaryFont : colors.primaryFont\r\n    }};\r\n    font-size: 10px;\r\n  }\r\n`\r\n\r\nconst PostText = styled.div`\r\n  padding: 20px 10px;\r\n`\r\n\r\nconst PostButtons = styled(C.FlexWrapper)`\r\n  padding: 10px;\r\n  button {\r\n    padding: 5px;\r\n    color: ${(props) => props.theme.colors.error};\r\n    font-size: 14px;\r\n    transition: all 0.3s ease;\r\n    &:hover {\r\n      color: ${(props) => props.theme.colors.accent};\r\n    }\r\n    span {\r\n      margin-left: 5px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const S = {\r\n  Post,\r\n  PostHeader,\r\n  UserInfo,\r\n  PostText,\r\n  PostButtons,\r\n}\r\n","import { faHeart, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { FC, memo } from 'react'\r\n\r\nimport { S } from './Post.styled'\r\n\r\nimport avatar from '../../../../app/assets/images/anynft.webp'\r\nimport { Avatar } from '../../../../components'\r\n\r\nimport { PostT } from '../../../../redux/profile-reducer'\r\n\r\ninterface PostPT {\r\n  post: PostT\r\n}\r\n\r\nexport const Post: FC<PostPT> = memo(({ post }) => {\r\n  const { user, text, likes } = post\r\n  return (\r\n    <S.Post>\r\n      <S.PostHeader $align={'center'}>\r\n        <Avatar img={avatar} w={50} h={50} />\r\n        <S.UserInfo $gap={'10px'} $justify={'space-between'}>\r\n          <span>{user}</span>\r\n          <i>12/04/2022</i>\r\n        </S.UserInfo>\r\n      </S.PostHeader>\r\n      <S.PostText>{text}</S.PostText>\r\n      <S.PostButtons $gap={'10px'} $justify={'space-between'}>\r\n        <button>\r\n          <FontAwesomeIcon icon={faHeart} />\r\n          <span>{likes}</span>\r\n        </button>\r\n        <button>\r\n          <FontAwesomeIcon icon={faTrash} />\r\n        </button>\r\n      </S.PostButtons>\r\n    </S.Post>\r\n  )\r\n})\r\n","import styled from 'styled-components'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\n\r\nconst Posts = styled(C.FlexWrapper)`\r\n  width: 100%;\r\n`\r\n\r\nconst FormWrapper = styled.div`\r\n  padding: 10px;\r\n`\r\n\r\nexport const S = {\r\n  Posts,\r\n  FormWrapper,\r\n}\r\n","import { FC, memo } from 'react'\r\n\r\nimport { Post } from './post/Post'\r\n\r\nimport { S } from './Posts.styled'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\nimport { TextForm } from '../../../components'\r\nimport { PostT } from '../../../redux/profile-reducer'\r\n\r\ninterface PostsPT {\r\n  posts: PostT[]\r\n  addPost: (postText: string) => void\r\n}\r\n\r\nexport const Posts: FC<PostsPT> = memo(({ posts, addPost }) => {\r\n  return (\r\n    <S.Posts $direction={'column'} $gap={'20px'}>\r\n      <C.ShadowContainer as={S.FormWrapper}>\r\n        <TextForm placeholder={'Enter post message...'} callback={addPost} />\r\n      </C.ShadowContainer>\r\n      {posts.map((el) => (\r\n        <Post key={el.id} post={el} />\r\n      ))}\r\n    </S.Posts>\r\n  )\r\n})\r\n","import styled from 'styled-components'\r\n\r\nconst CoverImg = styled.div`\r\n  height: 150px;\r\n  img {\r\n    height: 100%;\r\n    width: 100%;\r\n    object-fit: cover;\r\n  }\r\n`\r\n\r\nexport const S = {\r\n  CoverImg,\r\n}\r\n","import { FC } from 'react'\r\n\r\nimport { C } from '../../../../app/styles/Common.styled'\r\nimport { Social } from '../../../../components'\r\nimport { ContactsT } from '../../../../redux/profile-reducer'\r\n\r\ninterface LinksPT {\r\n  links: ContactsT\r\n}\r\n\r\nexport type ContactLinksT = keyof ContactsT\r\n\r\nexport const Links: FC<LinksPT> = ({ links }) => {\r\n  const linksNames = Object.keys(links) as ContactLinksT[]\r\n  return (\r\n    <C.FlexWrapper $gap={'10px'} $justify={'flex-end'}>\r\n      {linksNames.reduce((acc, el) => {\r\n        if (links[el]) {\r\n          acc.push(<Social key={el} iconId={el} link={links[el] ?? ''} />)\r\n        }\r\n        return acc\r\n      }, [] as JSX.Element[])}\r\n    </C.FlexWrapper>\r\n  )\r\n}\r\n","import styled, { css } from 'styled-components'\r\n\r\nimport { C } from '../../../app/styles/Common.styled'\r\n\r\nconst ProfileInfoStyled = styled(C.FlexWrapper)`\r\n  padding: 10px 10px 10px 160px;\r\n  position: relative;\r\n  width: 100%;\r\n`\r\n\r\nconst AvatarPos = css`\r\n  position: absolute;\r\n  margin-top: -80px;\r\n  left: 10px;\r\n  top: 0;\r\n  border: 5px solid ${(props) => props.theme.colors.secondaryBg};\r\n  border-radius: 50%;\r\n`\r\n\r\nconst Info = styled(C.FlexWrapper)`\r\n  margin-left: 20px;\r\n  width: 100%;\r\n`\r\n\r\nconst Name = styled(C.FlexWrapper)`\r\n  font-size: 25px;\r\n  p {\r\n    text-transform: uppercase;\r\n    font-weight: 600;\r\n    color: ${(props) => props.theme.colors.accent};\r\n  }\r\n  span {\r\n    font-size: 14px;\r\n    padding: 5px;\r\n    background-color: ${(props) => props.theme.colors.primaryBg};\r\n  }\r\n`\r\n\r\nconst Status = styled.div`\r\n  color: ${(props) => {\r\n    const { name, colors } = props.theme\r\n    return name === 'light' ? colors.primaryFont : colors.secondaryFont\r\n  }};\r\n  display: inline-flex;\r\n  width: 100%;\r\n  & span {\r\n    padding: 5px 5px 5px 0;\r\n    font-style: italic;\r\n    display: inline-block;\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst Looking = styled.div`\r\n  text-align: left;\r\n  span {\r\n    font-size: 18px;\r\n    padding: 5px 5px 5px 0;\r\n  }\r\n`\r\n\r\nconst Buttons = styled(C.FlexWrapper)`\r\n  padding: 0 10px;\r\n`\r\n\r\nexport const S = {\r\n  ProfileInfo: ProfileInfoStyled,\r\n  AvatarPos,\r\n  Info,\r\n  Name,\r\n  Status,\r\n  Looking,\r\n  Buttons,\r\n}\r\n","import { ChangeEvent, FC, KeyboardEvent, useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { Input } from '../../../../components'\r\nimport { updateStatusProfile } from '../../../../redux/profile-reducer'\r\nimport { RootStateT } from '../../../../redux/store'\r\nimport { getShortString } from '../../../../utils/string/getShortString'\r\nimport { S } from '../ProfileInfo.styled'\r\n\r\ntype StatusPT = MapStatePT & MapDispatchPT\r\n\r\nconst Status: FC<StatusPT> = ({ id, userId, status, updateStatusProfile }) => {\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [currentStatus, setCurrentStatus] = useState('')\r\n\r\n  useEffect(() => {\r\n    setCurrentStatus(status)\r\n  }, [status])\r\n\r\n  const activateEditMode = () => {\r\n    if (id === userId) setEditMode(true)\r\n  }\r\n\r\n  const deactivateEditMode = () => {\r\n    setCurrentStatus(status)\r\n    setEditMode(false)\r\n  }\r\n\r\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => setCurrentStatus(e.currentTarget.value)\r\n\r\n  const handleEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      updateStatusProfile(currentStatus)\r\n      deactivateEditMode()\r\n    }\r\n  }\r\n\r\n  const newStatus = status ? getShortString(status, 15) : 'No status'\r\n\r\n  return (\r\n    <S.Status>\r\n      {!editMode ? (\r\n        <span role='status-span' onDoubleClick={activateEditMode}>\r\n          {newStatus}\r\n        </span>\r\n      ) : (\r\n        <Input\r\n          role='status-input'\r\n          type='text'\r\n          value={currentStatus}\r\n          onChange={handleOnChange}\r\n          onBlur={deactivateEditMode}\r\n          onKeyDown={handleEnter}\r\n          autoFocus\r\n        />\r\n      )}\r\n    </S.Status>\r\n  )\r\n}\r\n\r\ninterface MapStatePT {\r\n  id?: number | null\r\n  userId?: number | null\r\n  status: string\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateT): MapStatePT => ({\r\n  id: state.app.id,\r\n  userId: state.profile.profile?.userId,\r\n  status: state.profile.status,\r\n})\r\n\r\ninterface MapDispatchPT {\r\n  updateStatusProfile: (status: string) => void\r\n}\r\n\r\nexport default connect<MapStatePT, MapDispatchPT, unknown, RootStateT>(mapStateToProps, {\r\n  updateStatusProfile,\r\n})(Status)\r\n","import { FC, memo } from 'react'\r\n\r\nimport { Links } from './links/Links'\r\n\r\nimport { S } from './ProfileInfo.styled'\r\n\r\nimport Status from './status/Status'\r\n\r\nimport noAvatar from '../../../app/assets/images/anynft.webp'\r\nimport { C } from '../../../app/styles/Common.styled'\r\nimport { Avatar } from '../../../components'\r\nimport { ButtonB } from '../../../components'\r\nimport { ContactsT } from '../../../redux/profile-reducer'\r\n\r\ninterface ProfileInfoPT {\r\n  avatar: string | null\r\n  name: string\r\n  isLookingJob: boolean\r\n  jobDesc: string | null\r\n  contacts: ContactsT\r\n}\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPT> = memo(({ avatar, name, isLookingJob, jobDesc, contacts }) => {\r\n  return (\r\n    <C.FlexWrapper $align={'center'} $justify={'space-between'}>\r\n      <S.ProfileInfo $align={'center'}>\r\n        <Avatar img={avatar || noAvatar} w={150} h={150} pos_styles={S.AvatarPos} />\r\n        <S.Info $direction={'column'} $align={'flex-start'} $gap={'10px'}>\r\n          <S.Name $align={'center'} $gap={'5px'}>\r\n            <p>{name}</p>\r\n            <span>{jobDesc || 'developer'}</span>\r\n          </S.Name>\r\n          <Status />\r\n          <S.Looking>\r\n            Looking for a job: <span>{isLookingJob ? 'YES' : 'NO'}</span>\r\n          </S.Looking>\r\n        </S.Info>\r\n      </S.ProfileInfo>\r\n      <S.Buttons $direction={'column'} $justify={'center'} $align={'flex-end'} $gap={'10px'}>\r\n        <ButtonB title={'edit'} callback={() => console.log(1)} />\r\n        <Links links={contacts} />\r\n      </S.Buttons>\r\n    </C.FlexWrapper>\r\n  )\r\n})\r\n","import { FC } from 'react'\r\n\r\nimport { About } from './about/About'\r\nimport { Friends } from './friends/Friends'\r\nimport { Posts } from './posts/Posts'\r\nimport { S } from './Profile.styled'\r\nimport { ProfileInfo } from './profileInfo/ProfileInfo'\r\n\r\nimport cover from '../../app/assets/images/carrepair.webp'\r\nimport { C } from '../../app/styles/Common.styled'\r\nimport { FriendsT, PostT, ProfileT } from '../../redux/profile-reducer'\r\n\r\ninterface ProfilePT {\r\n  profile: ProfileT\r\n  posts: PostT[]\r\n  friends: FriendsT | null\r\n  addPost: (postText: string) => void\r\n  isOwner: boolean\r\n}\r\n\r\nexport const Profile: FC<ProfilePT> = ({ profile, posts, friends, addPost, isOwner }) => (\r\n  <C.FlexWrapper $gap={'20px'} $direction={'column'}>\r\n    <C.ShadowContainer>\r\n      <S.CoverImg>\r\n        <img src={profile.photos.large || cover} alt='' />\r\n      </S.CoverImg>\r\n      <ProfileInfo\r\n        avatar={profile.photos.small}\r\n        name={profile.fullName}\r\n        isLookingJob={profile.lookingForAJob}\r\n        jobDesc={profile.lookingForAJobDescription}\r\n        contacts={profile.contacts}\r\n      />\r\n    </C.ShadowContainer>\r\n    <C.FlexWrapper $gap={'20px'}>\r\n      <Posts posts={posts} addPost={addPost} />\r\n      <C.FlexWrapper $gap={'20px'} $direction={'column'}>\r\n        <About about={profile.aboutMe} />\r\n        <Friends friends={friends} isOwner={isOwner} />\r\n      </C.FlexWrapper>\r\n    </C.FlexWrapper>\r\n  </C.FlexWrapper>\r\n)\r\n","import { Component, ComponentType } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\n\r\nimport { Profile } from './Profile'\r\n\r\nimport { Preloader } from '../../components'\r\nimport { AppST } from '../../redux/app-reducer'\r\nimport { addPost, getFriendsProfile, getStatusProfile, getUserProfile, ProfileST } from '../../redux/profile-reducer'\r\nimport { RootStateT } from '../../redux/store'\r\nimport { redirectToLogin } from '../../utils/hoc/redirectToLogin'\r\n\r\ntype ProfileContainerPT = MapStatePT & MapDispatchPT & RouteComponentProps<{ userId: string }>\r\n\r\nclass ProfileContainer extends Component<ProfileContainerPT> {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId\r\n    if (!userId) {\r\n      userId = `${this.props.id}`\r\n      this.props.getFriendsProfile()\r\n    }\r\n    this.props.getUserProfile(userId)\r\n    this.props.getStatusProfile(userId)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<ProfileContainerPT>) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isProfileLoading, profile, posts, friends, addPost } = this.props\r\n    return isProfileLoading || !profile ? (\r\n      <Preloader size={150} />\r\n    ) : (\r\n      <Profile\r\n        profile={profile}\r\n        posts={posts}\r\n        friends={friends}\r\n        addPost={addPost}\r\n        isOwner={!this.props.match.params.userId}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\ntype MapStatePT = Omit<ProfileST, 'status'> & Pick<AppST, 'id'>\r\n\r\nconst mapStateToProps = (state: RootStateT): MapStatePT => ({\r\n  profile: state.profile.profile,\r\n  posts: state.profile.posts,\r\n  friends: state.profile.friends,\r\n  isProfileLoading: state.profile.isProfileLoading,\r\n  id: state.app.id,\r\n})\r\n\r\ninterface MapDispatchPT {\r\n  addPost: (postText: string) => void\r\n  getUserProfile: (userId: string) => void\r\n  getStatusProfile: (userId: string) => void\r\n  getFriendsProfile: () => void\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n  connect<MapStatePT, MapDispatchPT, unknown, RootStateT>(mapStateToProps, {\r\n    addPost,\r\n    getUserProfile,\r\n    getStatusProfile,\r\n    getFriendsProfile,\r\n  }),\r\n  withRouter,\r\n  redirectToLogin,\r\n)(ProfileContainer)\r\n","import React, { ComponentType, FC } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport { AppST } from '../../redux/app-reducer'\nimport { RootStateT } from '../../redux/store'\n\nexport const redirectToLogin = (Component: ComponentType<any>) => {\n  const MyRedirect: FC<MapStatePT> = ({ isAuth, ...restProps }) => {\n    return isAuth ? <Component {...restProps} /> : <Redirect to={'/login'} />\n  }\n\n  type MapStatePT = Pick<AppST, 'isAuth'>\n\n  const mapStateToProps = (state: RootStateT): MapStatePT => ({\n    isAuth: state.app.isAuth,\n  })\n\n  return connect<MapStatePT, unknown, unknown, RootStateT>(mapStateToProps)(MyRedirect)\n}\n","export const getShortString = (str: string, maxLen: number) =>\n  str.length > maxLen ? `${str.slice(0, maxLen - 1)}...` : str\n"],"names":["About","memo","about","C","title","S","Friends","styled","List","Friend","props","theme","colors","thirdBg","Name","primaryFont","friend","id","name","photos","to","img","small","noAvatar","w","h","getShortString","friends","isOwner","friendsProfile","list","map","el","count","Post","PostHeader","accent","secondaryFont","UserInfo","F","PostText","PostButtons","error","post","user","text","likes","$align","avatar","$gap","$justify","icon","faHeart","faTrash","Posts","FormWrapper","posts","addPost","$direction","as","placeholder","callback","CoverImg","Links","links","linksNames","Object","keys","reduce","acc","push","iconId","link","ProfileInfo","AvatarPos","css","secondaryBg","Info","primaryBg","Status","Looking","Buttons","connect","state","app","userId","profile","status","updateStatusProfile","useState","editMode","setEditMode","currentStatus","setCurrentStatus","useEffect","deactivateEditMode","newStatus","role","type","value","onChange","e","currentTarget","onBlur","onKeyDown","key","autoFocus","onDoubleClick","isLookingJob","jobDesc","contacts","pos_styles","console","log","Profile","src","large","cover","alt","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileContainer","this","match","params","getFriendsProfile","getUserProfile","getStatusProfile","refreshProfile","prevProps","isProfileLoading","size","Component","compose","withRouter","redirectToLogin","isAuth","restProps","str","maxLen","length","slice"],"sourceRoot":""}